{"version":3,"file":"static/js/8429.f7764d92.chunk.js","mappings":"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","sources":["components/dashboard/minimalDashboard/AddUser.js","components/dashboard/minimalDashboard/UserList.js","views/dashboards/UsersList.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Col,\n  Row,\n  Form,\n  FormGroup,\n  Label,\n  Button,\n  Input,\n  ModalBody,\n  ModalFooter,\n} from 'reactstrap';\nimport { useDispatch } from 'react-redux';\nimport user1 from '../../../assets/images/users/user2.jpg';\nimport { addUser } from '../../../store/userSlice';\n\nconst AddUser = ({ click }) => {\n  const dispatch = useDispatch();\n \n  const [values, setValues] = useState({\n    name: '',\n    phone: '',\n    email: '',\n    address: '',\n    password: '',\n    confirmPassword: '',\n    txnPassword: '',\n    confirmTxnPassword: '',\n  });\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // Check if passwords match\n    if (values.password !== values.confirmPassword || values.txnPassword !== values.confirmTxnPassword) {\n      alert('Passwords do not match.');\n      return;\n    }\n\n    const userPayload = {\n        username: values.name,\n        phone: values.phone,\n        email: values.email,\n        address: values.address,\n        password: values.password,\n        transactionPassword: values.txnPassword, // Adjust according to your form field names\n        confirmPassword: values.confirmPassword,\n        confirmTxnPassword: values.confirmTxnPassword,\n      };\n\n    // Dispatch addUser action\n    dispatch( addUser(userPayload));\n\n    // Reset form values\n    setValues({\n      name: '',\n      phone: '',\n      email: '',\n      address: '',\n      password: '',\n      confirmPassword: '',\n      txnPassword: '',\n      confirmTxnPassword: '',\n    });\n\n    // Close modal or perform other necessary actions\n    click();\n  };\n  return (\n    <Form onSubmit={handleSubmit}>\n    <ModalBody>\n      <Row>\n        <Col md={6} className=\"text-center\">\n          <img src={user1} className=\"rounded-circle\" alt={user1} width=\"100\" />\n        </Col>\n        <Col md={6}>\n            <FormGroup>\n              <Label for=\"firstName\">Name</Label>\n              <Input\n                className=\"form-control\"\n                type=\"text\"\n                name=\"username\"\n                id=\"firstname\"\n                value={values.name}\n                onChange={(e) => setValues({ ...values, name: e.target.value })}\n                required\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"phone\">Phone</Label>\n              <Input\n                className=\"form-control\"\n                type=\"phone\"\n                name=\"phone\"\n                id=\"phone\"\n                value={values.phone}\n                onChange={(e) => setValues({ ...values, phone: e.target.value })}\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n        <Row>\n          <Col md={6}>\n          <FormGroup>\n              <Label for=\"email\">Email</Label>\n              <Input\n                className=\"form-control\"\n                type=\"email\"\n                name=\"email\"\n                id=\"email\"\n                value={values.email}\n                onChange={(e) => setValues({ ...values, email: e.target.value })}\n              />\n            </FormGroup>\n          </Col>\n          <Col md={6}>\n          <FormGroup>\n              <Label for=\"address\">Address</Label>\n              <Input\n                className=\"form-control\"\n                type=\"text\"\n                name=\"address\"\n                id=\"address\"\n                value={values.address}\n                onChange={(e) => setValues({ ...values, address: e.target.value })}\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n        <Row>\n          <Col md={6}>\n            <FormGroup>\n              <Label for=\"password\">Password</Label>\n              <Input\n                className=\"form-control\"\n                type=\"password\"\n                name=\"password\"\n                id=\"password\"\n                value={values.password}\n                onChange={(e) => setValues({ ...values, password: e.target.value })}\n              />\n            </FormGroup>\n          </Col>\n          <Col md={6}>\n            <FormGroup>\n              <Label for=\"email\">Txn Password</Label>\n              <Input\n                className=\"form-control\"\n                type=\"password\"\n                name=\"txnPassword\"\n                id=\"txnPassword\"\n                value={values.txnPassword}\n                onChange={(e) => setValues({ ...values, txnPassword: e.target.value })}\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n        <Row>\n          <Col md={6}>\n            <FormGroup>\n              <Label for=\"address\">Confirm Password</Label>\n              <Input\n                className=\"form-control\"\n                type=\"password\"\n                name=\"confirmPassword\"\n                id=\"confirmPassword\"\n                value={values.confirmPassword}\n                onChange={(e) => setValues({ ...values, confirmPassword: e.target.value })}\n              />\n            </FormGroup>\n          </Col>\n          <Col md={6}>\n            <FormGroup>\n              <Label for=\"notes\">Confirm txnPassword</Label>\n              <Input\n                className=\"form-control\"\n                type=\"password\"\n                name=\"confirmTxnPassword\"\n                id=\"confirmTxnPassword\"\n                value={values.confirmTxnPassword}\n                onChange={(e) => setValues({ ...values, confirmTxnPassword: e.target.value })}\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n      </ModalBody>\n      <ModalFooter>\n        <Button\n          color=\"primary\"\n          type=\"submit\"\n          disabled={\n            values.name.length === 0 ||\n            values.confirmTxnPassword.length === 0 ||\n            values.password !== values.confirmPassword ||\n            values.txnPassword !== values.confirmTxnPassword\n          }\n        >\n          Add Contact\n        </Button>\n      </ModalFooter>\n    </Form>\n  );\n};\n\nAddUser.propTypes = {\n  click: PropTypes.any,\n};\n\nexport default AddUser;","/* eslint-disable no-underscore-dangle */\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Button, Card, CardBody, CardTitle, Input, Modal, ModalHeader, Table } from 'reactstrap';\nimport { userListManage } from '../../../store/userSlice';\nimport AddUser from './AddUser'\n\nconst UserList = () => {\n  const dispatch = useDispatch();\n  const { data } = useSelector((state) => state.userListManageReducer);\n  \n  const [selectedChild, setSelectedChild] = useState('child1');\n\n  useEffect(() => {\n    dispatch(userListManage());\n  }, [dispatch]);\n\n  const [modal, setModal] = React.useState(false);\n\n  const getChildData = () => {\n    if (!data) return []; // Add a null check for data\n    switch (selectedChild) {\n      case 'child1':\n        return data.child1 || [];\n      case 'child2':\n        return data.child2 || [];\n      case 'child3':\n        return data.child3 || [];\n      default:\n        return [];\n    }\n  };\n  const toggle = () => {\n    setModal(!modal);\n  };\n  \n  return (\n    <Card>\n      <CardBody>\n        <div className=\"d-flex align-items-center justify-content-between\">\n          <div>\n            <CardTitle tag=\"h4\">Users Overview</CardTitle>\n          </div>\n          <div className=\"mt-4 mt-md-0\">\n        <Input\n          type=\"select\"\n          className=\"custom-select\"\n          value={selectedChild}\n          onChange={(e) => setSelectedChild(e.target.value)}\n        >\n          <option value=\"child1\">Level 1</option>\n          <option value=\"child2\">Level 2</option>\n          <option value=\"child3\">Level 3</option>\n        </Input>\n      </div>\n\n        </div>\n      </CardBody>\n      <CardBody className=\"bg-light d-flex align-items-center justify-content-between\">\n        <div className=\"mt-4 mt-md-0\">\n        <div className=\"p-3 border-bottom\">\n        <Button color=\"danger\" block onClick={toggle}>\n          Add New\n        </Button>\n      </div>\n        </div>\n      </CardBody>\n      <div className=\"table-responsive\">\n        <Table className=\"text-nowrap align-middle mb-0\" hover>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Name</th>\n              <th>Package</th>\n              <th>Mobile</th>\n              <th>Sponser</th>\n              <th>Action</th>\n              <th>Details</th>\n            </tr>\n          </thead>\n          <tbody>\n        {data && getChildData().map((tdata, index) => (\n          <tr key={tdata._id} className=\"border-top\">\n                <td>\n                  <h6 className=\"mb-0\">{index+1}</h6>\n                </td>\n                <td>\n                  <h6 className=\"mb-0\">{tdata.username}</h6>\n                </td>\n                <td><h6 className=\"mb-0\">{tdata.packageName}</h6></td>\n                <td><h6 className=\"mb-0\">{tdata.phone}</h6></td>\n                <td><h6 className=\"mb-0\">{tdata.ownSponserId}</h6></td>\n\n                <td>\n                <Link\n                                to={`/users-tree-list/${tdata._id}`}\n                                className=\"hidden xs:block ml-2\"\n                              >\n                <Button className=\"btn\"  color=\"success\">\n                View Tree\n              </Button>\n              </Link>\n              </td>\n              <td>\n              <Link\n                                to={`/user-profile/${tdata._id}`}\n                                className=\"hidden xs:block ml-2\"\n                              >\n              <Button className=\"btn \"  color=\"info\">\n                View Details\n              </Button>\n              </Link>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </div>\n      {/***********Contact Add Box**************/}\n      <Modal isOpen={modal} toggle={toggle} size=\"md\">\n        <ModalHeader toggle={toggle}>Add Contact</ModalHeader>\n        <AddUser click={toggle} />\n      </Modal>\n      {/***********Contact Add Box End**************/}\n    </Card>\n  );\n};\n\nexport default UserList;\n","import { Row, Col } from 'reactstrap';\nimport UserList from '../../components/dashboard/minimalDashboard/UserList';\n\n\nconst UsersList = () => {\n  return (\n    <>\n      {/*********************Sales Overview ************************/}\n      <Row>\n        <Col lg=\"12\">\n          <UserList />\n        </Col>\n      </Row>\n      \n    </>\n  );\n};\n\nexport default UsersList;"],"names":["click","dispatch","useDispatch","useState","name","phone","email","address","password","confirmPassword","txnPassword","confirmTxnPassword","values","setValues","onSubmit","e","preventDefault","userPayload","username","transactionPassword","addUser","alert","md","className","src","user1","alt","width","for","type","id","value","onChange","target","required","color","disabled","length","data","useSelector","state","userListManageReducer","selectedChild","setSelectedChild","useEffect","userListManage","React","modal","setModal","toggle","tag","block","onClick","hover","child1","child2","child3","getChildData","map","tdata","index","packageName","ownSponserId","to","_id","isOpen","size","lg"],"sourceRoot":""}