{"version":3,"file":"static/js/1331.f12255e0.chunk.js","mappings":"qIAuBA,IApBsB,SAAC,GAAmC,IAAjCA,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxC,OACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAWC,IAAI,KAAKC,UAAU,+BAA9B,SACGH,KAEH,UAAC,KAAD,CAAUG,UAAU,MAApB,WACE,SAAC,KAAD,CAAcA,UAAU,kBAAxB,SAA2CF,GAAY,MACvD,yBAAMF,Y,oJCqGd,EA9FkB,WAChB,IAAMK,GAAWC,EAAAA,EAAAA,MACjB,GAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8CJ,EAAAA,EAAAA,WAAS,GAAvD,eAAOK,EAAP,KAAwBC,EAAxB,KACA,GAAwCN,EAAAA,EAAAA,WAAS,GAAjD,eAAOO,EAAP,KAAqBC,EAArB,KAEMC,EAAc,kBAAML,GAAUD,IAC9BO,EAAwB,kBAAMJ,GAAoBD,IAClDM,EAAqB,kBAAMH,GAAiBD,IAelD,OACE,SAAC,KAAD,WACE,SAAC,KAAD,WACE,iCACE,SAACK,EAAA,EAAD,CAAelB,OAAO,iBAAMmB,MAAO,CAAEC,MAAO,QAASC,WAAY,QAA3C,8BAAtB,UACE,UAAC,KAAD,CAAMC,SAlBK,SAACC,GACpBA,EAAEC,iBAEF,IAAMC,EAAoBC,WAAWnB,IAAe,IAAOmB,WAAWnB,IAAe,IACrFoB,QAAQC,IAAIrB,GACRkB,GACFV,IACAX,GAASyB,EAAAA,EAAAA,IAAStB,KAElBS,KASM,WACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAOc,QAAQ,kBAAf,uDACA,SAAC,KAAD,CACEC,KAAK,SACLC,KAAK,OACLC,KAAK,aACLC,GAAG,kBACHC,YAAY,mBACZC,MAAO7B,EACP8B,SAAU,SAACd,GAAD,OAAOf,EAAce,EAAEe,OAAOF,QACxCG,UAAQ,EACRpB,MAAO,CAAEqB,MAAO,eAGpB,SAAC,KAAD,CAAQpB,MAAM,UAAUW,KAAK,SAASU,KAAK,KAA3C,0BAOJ,UAAC,KAAD,CAAOC,OAAQjC,EAAOkC,OAAQ5B,EAA9B,WACE,SAAC,KAAD,CAAa4B,OAAQ5B,EAArB,2BACA,UAAC,KAAD,kCACuBR,MAEvB,SAAC,KAAD,WACE,SAAC,KAAD,CAAQa,MAAM,UAAUwB,QAAS,WAAO7B,IAAeE,KAAvD,sBAOJ,UAAC,KAAD,CAAOyB,OAAQ/B,EAAiBgC,OAAQ3B,EAAxC,WACE,SAAC,KAAD,CAAa2B,OAAQ3B,EAArB,+BACA,SAAC,KAAD,oEAGA,SAAC,KAAD,WACE,SAAC,KAAD,CAAQI,MAAM,UAAUwB,QAAS5B,EAAjC,sBAOJ,UAAC,KAAD,CAAO0B,OAAQ7B,EAAc8B,OAAQ1B,EAArC,WACE,SAAC,KAAD,CAAa0B,OAAQ1B,EAArB,mCACA,SAAC,KAAD,qDAGA,SAAC,KAAD,WACE,SAAC,KAAD,CAAQG,MAAM,UAAUwB,QAAS3B,EAAjC,6BCnFd,EAdqB,WACnB,OACE,+BAEE,SAAC,KAAD,WACE,SAAC,KAAD,CAAK4B,GAAG,KAAR,UACE,SAACC,EAAD","sources":["components/ComponentCard.js","components/dashboard/minimalDashboard/ROISplit.js","views/dashboards/UserROISplit.js"],"sourcesContent":["import { Card, CardBody, CardTitle, CardSubtitle } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ComponentCard = ({ children, title, subtitle }) => {\r\n  return (\r\n    <Card>\r\n      <CardTitle tag=\"h4\" className=\"border-bottom px-4 py-3 mb-0\">\r\n        {title}\r\n      </CardTitle>\r\n      <CardBody className=\"p-4\">\r\n        <CardSubtitle className=\"text-muted mb-3\">{subtitle || ''}</CardSubtitle>\r\n        <div>{children}</div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nComponentCard.propTypes = {\r\n  children: PropTypes.node,\r\n  title: PropTypes.string,\r\n  subtitle: PropTypes.node\r\n};\r\n\r\nexport default ComponentCard;\r\n","import React, { useState } from 'react';\nimport {\n  Form,\n  FormGroup,\n  Label,\n  Card,\n  CardBody,\n  Input,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n} from 'reactstrap';\nimport { useDispatch } from 'react-redux';\nimport { splitRoi } from '../../../store/roiSlice';\nimport ComponentCard from '../../ComponentCard';\n\nconst BasicForm = () => {\n  const dispatch = useDispatch();\n  const [percentage, setPercentage] = useState('');\n  const [modal, setModal] = useState(false);\n  const [validationModal, setValidationModal] = useState(false);\n  const [successModal, setSuccessModal] = useState(false);\n\n  const toggleModal = () => setModal(!modal);\n  const toggleValidationModal = () => setValidationModal(!validationModal);\n  const toggleSuccessModal = () => setSuccessModal(!successModal);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const isValidPercentage = parseFloat(percentage) >= 0.4 && parseFloat(percentage) <= 1.4;\n    console.log(percentage);\n    if (isValidPercentage) {\n      toggleModal();\n      dispatch(splitRoi(percentage));\n    } else {\n      toggleValidationModal();\n    }\n  };\n\n  return (\n    <Card>\n      <CardBody>\n        <>\n          <ComponentCard title={<span style={{ color: 'Black', fontWeight: 'bold' }}>Split Todays ROI</span>}>\n            <Form onSubmit={handleSubmit}>\n              <FormGroup>\n                <Label htmlFor=\"percentageInput\">Enter your percentage between 0.4 to 1.4</Label>\n                <Input\n                  type=\"number\"\n                  step=\"0.01\"\n                  name=\"percentage\"\n                  id=\"percentageInput\"\n                  placeholder=\"Enter percentage\"\n                  value={percentage}\n                  onChange={(e) => setPercentage(e.target.value)}\n                  required\n                  style={{ width: '200px' }} // Reduced length of the text box\n                />\n              </FormGroup>\n              <Button color=\"primary\" type=\"submit\" size=\"lg\">\n                Submit\n              </Button>\n            </Form>\n          </ComponentCard>\n\n          {/* Confirmation Modal */}\n          <Modal isOpen={modal} toggle={toggleModal}>\n            <ModalHeader toggle={toggleModal}>Confirmation</ModalHeader>\n            <ModalBody>\n              Your percentage is: {percentage}\n            </ModalBody>\n            <ModalFooter>\n              <Button color=\"primary\" onClick={() => {toggleModal(); toggleSuccessModal();}}>\n                OK\n              </Button>\n            </ModalFooter>\n          </Modal>\n\n          {/* Validation Error Modal */}\n          <Modal isOpen={validationModal} toggle={toggleValidationModal}>\n            <ModalHeader toggle={toggleValidationModal}>Validation Error</ModalHeader>\n            <ModalBody>\n              Please enter a valid percentage between 0.4 and 1.4.\n            </ModalBody>\n            <ModalFooter>\n              <Button color=\"primary\" onClick={toggleValidationModal}>\n                OK\n              </Button>\n            </ModalFooter>\n          </Modal>\n\n          {/* Success Modal */}\n          <Modal isOpen={successModal} toggle={toggleSuccessModal}>\n            <ModalHeader toggle={toggleSuccessModal}>ROI Split Successful</ModalHeader>\n            <ModalBody>\n              Your ROI has been successfully split.\n            </ModalBody>\n            <ModalFooter>\n              <Button color=\"primary\" onClick={toggleSuccessModal}>\n                OK\n              </Button>\n            </ModalFooter>\n          </Modal>\n        </>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default BasicForm;\n","import { Row, Col } from 'reactstrap';\nimport ROISplit from '../../components/dashboard/minimalDashboard/ROISplit';\n\n\nconst UserROISplit = () => {\n  return (\n    <>\n      {/*********************Sales Overview ************************/}\n      <Row>\n        <Col lg=\"12\">\n          <ROISplit />\n        </Col>\n      </Row>\n      \n    </>\n  );\n};\n\nexport default UserROISplit;"],"names":["children","title","subtitle","tag","className","dispatch","useDispatch","useState","percentage","setPercentage","modal","setModal","validationModal","setValidationModal","successModal","setSuccessModal","toggleModal","toggleValidationModal","toggleSuccessModal","ComponentCard","style","color","fontWeight","onSubmit","e","preventDefault","isValidPercentage","parseFloat","console","log","splitRoi","htmlFor","type","step","name","id","placeholder","value","onChange","target","required","width","size","isOpen","toggle","onClick","lg","ROISplit"],"sourceRoot":""}