{"version":3,"file":"static/js/6993.cc848025.chunk.js","mappings":"uNAoJA,UA3IuB,WACrB,IAQMA,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,SAAUF,EAAAA,KAAaG,SAAS,wBAChCC,MAAOJ,EAAAA,KAAaI,MAAM,oBAAoBD,SAAS,qBACvDE,SAAUL,EAAAA,KACPM,IAAI,EAAG,0CACPH,SAAS,wBACZI,gBAAiBP,EAAAA,KACdQ,MAAM,CAACR,EAAAA,GAAQ,YAAa,MAAO,wBACnCG,SAAS,gCACZM,YAAaT,EAAAA,KAAWQ,MAAM,EAAC,GAAO,2CAGxC,OACE,iBAAKE,UAAU,WAAf,WACE,SAAC,IAAD,CAAQA,UAAU,qCAClB,SAAC,IAAD,CAASA,UAAU,iCACnB,SAAC,KAAD,CAAWC,OAAK,EAACD,UAAU,QAA3B,UACE,SAAC,KAAD,CAAKA,UAAU,kDAAf,UACE,UAAC,KAAD,CAAKE,GAAG,KAAKF,UAAU,iBAAvB,WACE,SAAC,IAAD,KACA,SAAC,KAAD,WACE,UAAC,KAAD,CAAUA,UAAU,UAApB,WACE,eAAIA,UAAU,OAAd,uBACA,mBAAOA,UAAU,eAAjB,uCAC2B,SAAC,KAAD,CAAMG,GAAG,oBAAT,uBAE3B,SAAC,KAAD,CACEC,cAnCM,CACpBZ,SAAU,GACVE,MAAO,GACPC,SAAU,GACVE,gBAAiB,GACjBE,aAAa,GA+BCV,iBAAkBA,EAClBgB,SAAU,SAACC,GAETC,MAAM,oBAAD,OAAqBC,KAAKC,UAAUH,EAAQ,KAAM,MAEzDI,OAAQ,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACN,UAAC,KAAD,YACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAOC,QAAQ,YAAf,wBACA,SAAC,KAAD,CACEC,KAAK,WACLC,KAAK,OACLf,UAAS,uBACPW,EAAOnB,UAAYoB,EAAQpB,SAAW,cAAgB,OAG1D,SAAC,KAAD,CACEsB,KAAK,WACLE,UAAU,MACVhB,UAAU,yBAId,UAAC,KAAD,YACE,SAAC,KAAD,CAAOa,QAAQ,QAAf,oBACA,SAAC,KAAD,CACEC,KAAK,QACLC,KAAK,OACLf,UAAS,sBACPW,EAAOjB,OAASkB,EAAQlB,MAAQ,cAAgB,OAGpD,SAAC,KAAD,CAAcoB,KAAK,QAAQE,UAAU,MAAMhB,UAAU,yBAEvD,UAAC,KAAD,YACE,SAAC,KAAD,CAAOa,QAAQ,WAAf,uBACA,SAAC,KAAD,CACEC,KAAK,WACLC,KAAK,WACLf,UAAS,sBACPW,EAAOhB,UAAYiB,EAAQjB,SAAW,cAAgB,OAG1D,SAAC,KAAD,CACEmB,KAAK,WACLE,UAAU,MACVhB,UAAU,yBAGd,UAAC,KAAD,YACE,SAAC,KAAD,CAAOa,QAAQ,kBAAf,+BACA,SAAC,KAAD,CACEC,KAAK,kBACLC,KAAK,WACLf,UAAS,sBACPW,EAAOd,iBAAmBe,EAAQf,gBAAkB,cAAgB,OAGxE,SAAC,KAAD,CACEiB,KAAK,kBACLE,UAAU,MACVhB,UAAU,yBAGd,UAAC,KAAD,CAAWiB,QAAM,EAACjB,UAAU,aAA5B,WACE,SAAC,KAAD,CACEe,KAAK,WACLD,KAAK,cACLI,GAAG,cACHlB,UAAS,2BACPW,EAAOZ,aAAea,EAAQb,YAAc,cAAgB,OAGhE,SAAC,KAAD,CAAOc,QAAQ,cAAcb,UAAU,mBAAvC,wCAGA,SAAC,KAAD,CACEc,KAAK,cACLE,UAAU,MACVhB,UAAU,yBAGd,UAAC,KAAD,YACE,SAAC,KAAD,CAAQe,KAAK,SAASI,MAAM,UAAUnB,UAAU,OAAhD,uBAGA,SAAC,KAAD,CAAQe,KAAK,QAAQI,MAAM,YAA3B","sources":["views/auth/RegisterFormik.js"],"sourcesContent":["import React from 'react';\r\nimport { Button, Label, FormGroup, Container, Row, Col, Card, CardBody } from 'reactstrap';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\nimport AuthLogo from \"../../layouts/logo/AuthLogo\";\r\nimport { ReactComponent as LeftBg } from '../../assets/images/bg/login-bgleft.svg';\r\nimport { ReactComponent as RightBg } from '../../assets/images/bg/login-bg-right.svg';\r\n\r\nconst RegisterFormik = () => {\r\n  const initialValues = {\r\n    UserName: '',\r\n    email: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n    acceptTerms: false,\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    UserName: Yup.string().required('UserName is required'),\r\n    email: Yup.string().email('Email is invalid').required('Email is required'),\r\n    password: Yup.string()\r\n      .min(6, 'Password must be at least 6 characters')\r\n      .required('Password is required'),\r\n    confirmPassword: Yup.string()\r\n      .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n      .required('Confirm Password is required'),\r\n    acceptTerms: Yup.bool().oneOf([true], 'Accept Terms & Conditions is required'),\r\n  });\r\n\r\n  return (\r\n    <div className=\"loginBox\">\r\n      <LeftBg className=\"position-absolute left bottom-0\" />\r\n      <RightBg className=\"position-absolute end-0 top\" />\r\n      <Container fluid className=\"h-100\">\r\n        <Row className=\"justify-content-center align-items-center h-100\">\r\n          <Col lg=\"12\" className=\"loginContainer\">\r\n            <AuthLogo />\r\n            <Card>\r\n              <CardBody className=\"p-4 m-1\">\r\n                <h5 className=\"mb-0\">Register</h5>\r\n                <small className=\"pb-4 d-block\">\r\n                  Already have an account? <Link to=\"/auth/loginformik\">Login</Link>\r\n                </small>\r\n                <Formik\r\n                  initialValues={initialValues}\r\n                  validationSchema={validationSchema}\r\n                  onSubmit={(fields) => {\r\n                    // eslint-disable-next-line no-alert\r\n                    alert(`SUCCESS!! :-)\\n\\n${JSON.stringify(fields, null, 4)}`);\r\n                  }}\r\n                  render={({ errors, touched }) => (\r\n                    <Form>\r\n                      <FormGroup>\r\n                        <Label htmlFor=\"firstName\">User Name</Label>\r\n                        <Field\r\n                          name=\"UserName\"\r\n                          type=\"text\"\r\n                          className={`form-control ${\r\n                            errors.UserName && touched.UserName ? ' is-invalid' : ''\r\n                          }`}\r\n                        />\r\n                        <ErrorMessage\r\n                          name=\"UserName\"\r\n                          component=\"div\"\r\n                          className=\"invalid-feedback\"\r\n                        />\r\n                      </FormGroup>\r\n\r\n                      <FormGroup>\r\n                        <Label htmlFor=\"email\">Email</Label>\r\n                        <Field\r\n                          name=\"email\"\r\n                          type=\"text\"\r\n                          className={`form-control${\r\n                            errors.email && touched.email ? ' is-invalid' : ''\r\n                          }`}\r\n                        />\r\n                        <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\r\n                      </FormGroup>\r\n                      <FormGroup>\r\n                        <Label htmlFor=\"password\">Password</Label>\r\n                        <Field\r\n                          name=\"password\"\r\n                          type=\"password\"\r\n                          className={`form-control${\r\n                            errors.password && touched.password ? ' is-invalid' : ''\r\n                          }`}\r\n                        />\r\n                        <ErrorMessage\r\n                          name=\"password\"\r\n                          component=\"div\"\r\n                          className=\"invalid-feedback\"\r\n                        />\r\n                      </FormGroup>\r\n                      <FormGroup>\r\n                        <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\r\n                        <Field\r\n                          name=\"confirmPassword\"\r\n                          type=\"password\"\r\n                          className={`form-control${\r\n                            errors.confirmPassword && touched.confirmPassword ? ' is-invalid' : ''\r\n                          }`}\r\n                        />\r\n                        <ErrorMessage\r\n                          name=\"confirmPassword\"\r\n                          component=\"div\"\r\n                          className=\"invalid-feedback\"\r\n                        />\r\n                      </FormGroup>\r\n                      <FormGroup inline className=\"form-check\">\r\n                        <Field\r\n                          type=\"checkbox\"\r\n                          name=\"acceptTerms\"\r\n                          id=\"acceptTerms\"\r\n                          className={`form-check-input ${\r\n                            errors.acceptTerms && touched.acceptTerms ? ' is-invalid' : ''\r\n                          }`}\r\n                        />\r\n                        <Label htmlFor=\"acceptTerms\" className=\"form-check-label\">\r\n                          Accept Terms & Conditions\r\n                        </Label>\r\n                        <ErrorMessage\r\n                          name=\"acceptTerms\"\r\n                          component=\"div\"\r\n                          className=\"invalid-feedback\"\r\n                        />\r\n                      </FormGroup>\r\n                      <FormGroup>\r\n                        <Button type=\"submit\" color=\"primary\" className=\"me-2\">\r\n                          Register\r\n                        </Button>\r\n                        <Button type=\"reset\" color=\"secondary\">\r\n                          Reset\r\n                        </Button>\r\n                      </FormGroup>\r\n                    </Form>\r\n                  )}\r\n                />\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterFormik;\r\n"],"names":["validationSchema","Yup","shape","UserName","required","email","password","min","confirmPassword","oneOf","acceptTerms","className","fluid","lg","to","initialValues","onSubmit","fields","alert","JSON","stringify","render","errors","touched","htmlFor","name","type","component","inline","id","color"],"sourceRoot":""}