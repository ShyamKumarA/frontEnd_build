{"version":3,"file":"static/js/2567.7cb36319.chunk.js","mappings":"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","sources":["views/auth/RegisterFormik.js"],"sourcesContent":["import React from 'react';\r\nimport { Button, Label, FormGroup, Container, Row, Col, Card, CardBody } from 'reactstrap';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport PhoneInput from 'react-phone-number-input';\r\nimport AuthLogo from \"../../layouts/logo/AuthLogo\";\r\nimport { ReactComponent as LeftBg } from '../../assets/images/bg/login-bgleft.svg';\r\nimport { ReactComponent as RightBg } from '../../assets/images/bg/login-bg-right.svg';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { addUserReferal } from '../../store/userSlice';\r\nimport 'react-phone-number-input/style.css';\r\n\r\nconst RegisterFormik = () => {\r\n  const dispatch = useDispatch();\r\n  const location = useLocation();\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const id = searchParams.get('id');\r\n\r\n  const initialValues = {\r\n    UserName: '',\r\n    phone: '',\r\n    email: '',\r\n    address: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n    txnPassword: '',\r\n    confirmTxnPassword: '',\r\n    acceptTerms: false,\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    UserName: Yup.string().required('UserName is required'),\r\n    email: Yup.string().email('Email is invalid').required('Email is required'),\r\n    address: Yup.string().required('Address is required'),\r\n    password: Yup.string()\r\n      .min(6, 'Password must be at least 6 characters')\r\n      .required('Password is required'),\r\n    txnPassword: Yup.string()\r\n      .min(6, 'TxnPassword must be at least 6 characters')\r\n      .required('TxnPassword is required'),\r\n    acceptTerms: Yup.bool().oneOf([true], 'Accept Terms & Conditions is required'),\r\n  });\r\n\r\n  const handleRegister = async (values, { resetForm }) => {\r\n    try {\r\n      await dispatch(\r\n        addUserReferal({\r\n          userId: id,\r\n          username: values.UserName,\r\n          phone: values.phone,\r\n          email: values.email,\r\n          address: values.address,\r\n          password: values.password,\r\n          confirmPassword: values.confirmPassword,\r\n          transactionPassword: values.txnPassword,\r\n          confirmTxnPassword: values.confirmTxnPassword,\r\n        })\r\n      );\r\n      resetForm();\r\n      toast.success('User registered successfully, User name and Password sent to your email');\r\n    } catch (error) {\r\n      if (error.response && error.response.status === 401) {\r\n        toast.error('User already exists');\r\n      } else {\r\n        toast.error('Failed to register user');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"loginBox\">\r\n      <LeftBg className=\"position-absolute left bottom-0\" />\r\n      <RightBg className=\"position-absolute end-0 top\" />\r\n      <Container fluid className=\"h-100\">\r\n        <Row className=\"justify-content-center align-items-center h-100\">\r\n          <Col lg=\"12\" className=\"loginContainer\">\r\n            <AuthLogo />\r\n            <Card>\r\n              <CardBody className=\"p-4 m-1\">\r\n                <h5 className=\"mb-0 \">Register</h5>\r\n                <br />\r\n                <Formik\r\n                  initialValues={initialValues}\r\n                  validationSchema={validationSchema}\r\n                  onSubmit={handleRegister}\r\n                >\r\n                  {({ errors, touched, values, setFieldValue, handleBlur }) => (\r\n                    <Form>\r\n                      <FormGroup>\r\n                        <Label htmlFor=\"UserName\">Name</Label>\r\n                        <Field\r\n                          name=\"UserName\"\r\n                          type=\"text\"\r\n                          className={`form-control ${\r\n                            errors.UserName && touched.UserName ? ' is-invalid' : ''\r\n                          }`}\r\n                        />\r\n                        <ErrorMessage\r\n                          name=\"UserName\"\r\n                          component=\"div\"\r\n                          className=\"invalid-feedback\"\r\n                        />\r\n                      </FormGroup>\r\n\r\n                      <FormGroup>\r\n                        <Label htmlFor=\"email\">Email</Label>\r\n                        <Field\r\n                          name=\"email\"\r\n                          type=\"text\"\r\n                          className={`form-control${\r\n                            errors.email && touched.email ? ' is-invalid' : ''\r\n                          }`}\r\n                        />\r\n                        <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\r\n                      </FormGroup>\r\n\r\n                      <FormGroup>\r\n                        <Label htmlFor=\"phone\">Phone</Label>\r\n                        <PhoneInput\r\n                            name=\"phone\"\r\n                            placeholder=\"Enter phone number\"\r\n                            value={values.phone}\r\n                            onChange={value => setFieldValue('phone', value)}\r\n                            onBlur={handleBlur}\r\n                            defaultCountry=\"IN\" // Set India as the default country\r\n                            className={`form-control${\r\n                              errors.phone && touched.phone ? ' is-invalid' : ''\r\n                            }`}\r\n                          />\r\n                        <ErrorMessage name=\"phone\" component=\"div\" className=\"invalid-feedback\" />\r\n                      </FormGroup>\r\n\r\n                      <FormGroup>\r\n                        <Label htmlFor=\"address\">Address</Label>\r\n                        <Field\r\n                          name=\"address\"\r\n                          type=\"text\"\r\n                          className={`form-control${\r\n                            errors.address && touched.address ? ' is-invalid' : ''\r\n                          }`}\r\n                        />\r\n                        <ErrorMessage name=\"address\" component=\"div\" className=\"invalid-feedback\" />\r\n                      </FormGroup>\r\n\r\n                      <FormGroup>\r\n                        <Label htmlFor=\"password\">Password</Label>\r\n                        <Field\r\n                          name=\"password\"\r\n                          type=\"password\"\r\n                          className={`form-control${\r\n                            errors.password && touched.password ? ' is-invalid' : ''\r\n                          }`}\r\n                        />\r\n                        <ErrorMessage\r\n                          name=\"password\"\r\n                          component=\"div\"\r\n                          className=\"invalid-feedback\"\r\n                        />\r\n                      </FormGroup>\r\n\r\n                      <FormGroup>\r\n                        <Label htmlFor=\"txnPassword\">Transaction Password</Label>\r\n                        <Field\r\n                          name=\"txnPassword\"\r\n                          type=\"password\"\r\n                          className={`form-control${\r\n                            errors.txnPassword && touched.txnPassword ? ' is-invalid' : ''\r\n                          }`}\r\n                        />\r\n                        <ErrorMessage\r\n                          name=\"txnPassword\"\r\n                          component=\"div\"\r\n                          className=\"invalid-feedback\"\r\n                        />\r\n                      </FormGroup>\r\n\r\n                      <FormGroup inline className=\"form-check\">\r\n                        <Field\r\n                          type=\"checkbox\"\r\n                          name=\"acceptTerms\"\r\n                          id=\"acceptTerms\"\r\n                          className={`form-check-input ${\r\n                            errors.acceptTerms && touched.acceptTerms ? ' is-invalid' : ''\r\n                          }`}\r\n                        />\r\n                        <Label htmlFor=\"acceptTerms\" className=\"form-check-label\">\r\n                          Accept Terms & Conditions\r\n                        </Label>\r\n                        <ErrorMessage\r\n                          name=\"acceptTerms\"\r\n                          component=\"div\"\r\n                          className=\"invalid-feedback\"\r\n                        />\r\n                      </FormGroup>\r\n\r\n                      <FormGroup>\r\n                        <Button type=\"submit\" color=\"primary\" className=\"me-2\">\r\n                          Register\r\n                        </Button>\r\n\r\n                        <Button type=\"reset\" color=\"secondary\">\r\n                          Reset\r\n                        </Button>\r\n                      </FormGroup>\r\n                    </Form>\r\n                  )}\r\n                </Formik>\r\n\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterFormik;\r\n"],"names":["dispatch","useDispatch","location","useLocation","id","URLSearchParams","search","get","validationSchema","Yup","shape","UserName","required","email","address","password","min","txnPassword","acceptTerms","oneOf","handleRegister","values","resetForm","addUserReferal","userId","username","phone","confirmPassword","transactionPassword","confirmTxnPassword","toast","response","status","className","fluid","lg","initialValues","onSubmit","errors","touched","setFieldValue","handleBlur","htmlFor","name","type","component","placeholder","value","onChange","onBlur","defaultCountry","inline","color"],"sourceRoot":""}