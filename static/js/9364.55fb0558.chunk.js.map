{"version":3,"file":"static/js/9364.55fb0558.chunk.js","mappings":"8NAgIA,EA1H8B,WAC5B,IAAMA,GAAWC,EAAAA,EAAAA,MACTC,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,sCAAtCH,KACMI,GAAeH,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMG,+BAAlDL,KACMM,GAAeL,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMK,+BAAlDP,KAGR,GAA0DQ,EAAAA,EAAAA,WAAS,GAAnE,eAAOC,EAAP,KAA8BC,EAA9B,KACA,GAA0DF,EAAAA,EAAAA,WAAS,GAAnE,eAAOG,EAAP,KAA8BC,EAA9B,KACA,GAAkDJ,EAAAA,EAAAA,UAAS,MAA3D,eAAOK,EAAP,KAA0BC,EAA1B,MAEAC,EAAAA,EAAAA,YAAU,WACRjB,GAASkB,EAAAA,EAAAA,SACR,CAAClB,EAAUM,EAAWE,IAEzB,IASMW,EAA+B,WACnCP,GAAyB,IASrBQ,EAAmB,WACvBN,GAAyB,IAG3B,OACE,UAAC,KAAD,YACE,SAAC,KAAD,WACE,iBAAKO,UAAU,oDAAf,WACE,0BACE,SAAC,KAAD,CAAWC,IAAI,KAAf,0CAEF,gBAAKD,UAAU,eAAf,UACE,UAAC,KAAD,CAAOE,KAAK,SAASF,UAAU,gBAA/B,WACE,mBAAQG,MAAM,IAAd,sBACA,mBAAQA,MAAM,IAAd,oBACA,mBAAQA,MAAM,IAAd,qBACA,mBAAQA,MAAM,IAAd,+BAKR,SAAC,KAAD,CAAUH,UAAU,gEAGpB,gBAAKA,UAAU,mBAAf,UACE,UAAC,KAAD,CAAOA,UAAU,gCAAgCI,OAAK,EAAtD,WACE,4BACE,2BACE,+BACA,kCACA,kCACA,oCACA,wCACA,yCAGJ,2BACGvB,GAAQA,EAAKwB,SAASC,KAAI,SAACC,EAAOC,GAAR,OACzB,gBAAsBR,UAAU,aAAhC,WACE,yBACE,eAAIA,UAAU,OAAd,SAAsBQ,EAAQ,OAEhC,yBACE,eAAIR,UAAU,OAAd,SAAsBO,EAAME,cAE9B,wBAAKF,EAAMG,SACX,wBAAKH,EAAMI,wBACX,wBAAKJ,EAAMK,qBAEX,2BACE,SAAC,KAAD,CAAQZ,UAAU,UAAUa,QAAS,kBArE9BC,EAqEkDP,EAAMQ,IApE7EpB,EAAqBmB,QACrBvB,GAAyB,GAFL,IAACuB,GAqE8DE,MAAM,UAA3E,qBAGA,SAAC,KAAD,CAAQhB,UAAU,MAAMgB,MAAM,SAASH,QAAS,kBAnE3CC,EAmE+DP,EAAMQ,SAlExFpC,GAASsC,EAAAA,EAAAA,GAAqBH,IADZ,IAACA,GAmEL,yBAfKP,EAAMW,kBA0BvB,UAAC,KAAD,CAAOC,OAAQ7B,EAAuB8B,OAAQtB,EAA9C,WACE,SAAC,KAAD,CAAasB,OAAQtB,EAArB,iCACA,SAAC,KAAD,6DAGA,UAAC,KAAD,YACE,SAAC,KAAD,CAAQkB,MAAM,YAAYH,QAASf,EAAnC,qBACA,SAAC,KAAD,CAAQkB,MAAM,UAAUH,QA7EA,WAC9BlC,GAAS0C,EAAAA,EAAAA,IAAqB3B,IAC9BD,GAAyB,GACzBF,GAAyB,IA0EnB,4BAKJ,UAAC,KAAD,CAAO4B,OAAQ3B,EAAuB4B,OAAQrB,EAA9C,WACE,SAAC,KAAD,8CAGA,SAAC,KAAD,WACE,SAAC,KAAD,CAAQiB,MAAM,UAAUH,QAASd,EAAjC,4BCvGV,EAd8B,WAC5B,OACE,+BAEE,SAAC,KAAD,WACE,SAAC,KAAD,CAAKuB,GAAG,KAAR,UACE,SAAC,EAAD","sources":["components/dashboard/minimalDashboard/PendingWalletWithdraw.js","views/dashboards/WalletWithdrawPending.js"],"sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, Card, CardBody, CardTitle, Input, Table, Modal, ModalBody, ModalFooter, ModalHeader } from 'reactstrap';\nimport { AcceptWalletWithdraw, walletWithdrawPendingManage,RejectWalletWithdraw } from '../../../store/withdrawalSlice';\n\nconst PendingWalletWithdraw = () => {\n  const dispatch = useDispatch();\n  const { data } = useSelector((state) => state.walletWithdrawPendingManageReducer);\n  const { data: acceptData } = useSelector((state) => state.AcceptWalletWithdrawReducer);\n  const { data: rejectData } = useSelector((state) => state.RejectWalletWithdrawReducer);\n\n\n  const [showConfirmationModal, setShowConfirmationModal] = useState(false);\n  const [showConfirmationPopup, setShowConfirmationPopup] = useState(false);\n  const [selectedPackageId, setSelectedPackageId] = useState(null);\n\n  useEffect(() => {\n    dispatch(walletWithdrawPendingManage());\n  }, [dispatch, acceptData,rejectData]);\n\n  const acceptHandler = (id) => {\n    setSelectedPackageId(id);\n    setShowConfirmationModal(true);\n  };\n\n  const rejectHandler=(id)=>{\n    dispatch(RejectWalletWithdraw(id))\n  }\n\n  const handleCloseConfirmationModal = () => {\n    setShowConfirmationModal(false);\n  };\n\n  const handleConfirmAcceptance = () => {\n    dispatch(AcceptWalletWithdraw(selectedPackageId));\n    setShowConfirmationPopup(true);\n    setShowConfirmationModal(false);\n  };\n\n  const handlePopupClose = () => {\n    setShowConfirmationPopup(false);\n  };\n\n  return (\n    <Card>\n      <CardBody>\n        <div className=\"d-flex align-items-center justify-content-between\">\n          <div>\n            <CardTitle tag=\"h4\">Pending Wallet withdrawal</CardTitle>\n          </div>\n          <div className=\"mt-4 mt-md-0\">\n            <Input type=\"select\" className=\"custom-select\">\n              <option value=\"0\">Monthly</option>\n              <option value=\"1\">Daily</option>\n              <option value=\"2\">Weekly</option>\n              <option value=\"3\">Yearly</option>\n            </Input>\n          </div>\n        </div>\n      </CardBody>\n      <CardBody className=\"bg-light d-flex align-items-center justify-content-between\">\n        \n      </CardBody>\n      <div className=\"table-responsive\">\n        <Table className=\"text-nowrap align-middle mb-0\" hover>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Name</th>\n              <th>Date</th>\n              <th>Amount</th>\n              <th>Wallet Url</th>\n              <th>Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            {data && data.userData.map((tdata, index) => (\n              <tr key={tdata.email} className=\"border-top\">\n                <td>\n                  <h6 className=\"mb-0\">{index + 1}</h6>\n                </td>\n                <td>\n                  <h6 className=\"mb-0\">{tdata.username}</h6>\n                </td>\n                <td>{tdata.phone}</td>\n                <td>{tdata.walletWithdrawAmount}</td>\n                <td>{tdata.walletWithdrawUrl}</td>\n\n                <td>\n                  <Button className=\"btn m-2\" onClick={() => acceptHandler(tdata._id)} color=\"success\">\n                    Accept\n                  </Button>\n                  <Button className=\"btn\" color=\"danger\" onClick={() => rejectHandler(tdata._id)}>\n                    Reject\n                  </Button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </div>\n\n      {/* Confirmation Modal */}\n      <Modal isOpen={showConfirmationModal} toggle={handleCloseConfirmationModal}>\n        <ModalHeader toggle={handleCloseConfirmationModal}>Confirm Acceptance</ModalHeader>\n        <ModalBody>\n          Are you sure you want to accept this package?\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"secondary\" onClick={handleCloseConfirmationModal}>Cancel</Button>\n          <Button color=\"success\" onClick={handleConfirmAcceptance}>Confirm</Button>\n        </ModalFooter>\n      </Modal>\n\n      {/* Confirmation Popup */}\n      <Modal isOpen={showConfirmationPopup} toggle={handlePopupClose}>\n        <ModalBody>\n          Package accepted successfully!\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"success\" onClick={handlePopupClose}>Close</Button>\n        </ModalFooter>\n      </Modal>\n    </Card>\n  );\n};\n\nexport default PendingWalletWithdraw;\n","import { Row, Col } from 'reactstrap';\nimport PendingWalletWithdraw from '../../components/dashboard/minimalDashboard/PendingWalletWithdraw';\n\n\nconst WalletWithdrawPending = () => {\n  return (\n    <>\n      {/*********************Sales Overview ************************/}\n      <Row>\n        <Col lg=\"12\">\n          <PendingWalletWithdraw />\n        </Col>\n      </Row>\n      \n    </>\n  );\n};\n\nexport default WalletWithdrawPending;"],"names":["dispatch","useDispatch","data","useSelector","state","walletWithdrawPendingManageReducer","acceptData","AcceptWalletWithdrawReducer","rejectData","RejectWalletWithdrawReducer","useState","showConfirmationModal","setShowConfirmationModal","showConfirmationPopup","setShowConfirmationPopup","selectedPackageId","setSelectedPackageId","useEffect","walletWithdrawPendingManage","handleCloseConfirmationModal","handlePopupClose","className","tag","type","value","hover","userData","map","tdata","index","username","phone","walletWithdrawAmount","walletWithdrawUrl","onClick","id","_id","color","RejectWalletWithdraw","email","isOpen","toggle","AcceptWalletWithdraw","lg"],"sourceRoot":""}